Sub paging <<EOS
sub {
	my ($next, $prev, $page, $border, $border_selected, $opt, $r) = @_;
	my ($q, $pages, $first, $curpage, $url, @links, @labels, @more, $base_url, 
	    $prefix, $suffix, $session, $form_arg, $nav, $ml, $matches, $replace, 
            $out, $link_prefix, $link_suffix);

    	my $q;
	
	$q = $opt->{object} || $::Instance->{SearchObject}{$opt->{label}};
	return '' unless $q->{matches} > $q->{mv_matchlimit}
		and $q->{mv_matchlimit} > 0;

	# turn form parameter into a hash	
	my %form;

	if ($opt->{form}) {
		my (@params, $key, $val);

		@params = split /\n+/, $opt->{form};

		for (@params) {
			($key, $val) = split /=/, $_, 2;
			$form{$key} = $val;
		}
	}

	$ml = $q->{mv_matchlimit};
	$matches = $q->{matches};
	$pages = int($matches / $ml);
	if ($matches % $ml) {
        	$pages++;
	}

        $curpage = $opt->{paging_page} || $CGI->{category_page};

	if ($curpage) {
		$first = ($curpage - 1) * $ml;
	}
	else {
		$first = $q->{mv_first_match} || 1;
	}

	if ($r =~ /\[more\]/) {
		# check for [more] replacement
		$replace = 1;
	}

	if ($r =~ /\[match/) {
		my ($range_start, $range_end);

		$range_start = $first;
		$range_end = $first + $ml - 1;

		if ($range_end > $matches) {
			$range_end = $matches;
		}

		$r =~ s/\[matches]/$range_start-$range_end/;
		$r =~ s/\[match-count]/$matches/;

		return $r unless $replace;
	}

	# extract anchor labels
	my %anchor_labels;

	for my $anchor qw(first prev next last) {
	    if ($r =~ s:\[$anchor[-_]anchor\](.*?)\[/$anchor[-_]anchor\]::i) {
	       $anchor_labels{$anchor} = $1;
            }
        }

        # link prefix / link suffix
	$link_prefix = (exists $opt->{link_prefix}) ? $opt->{link_prefix} : '<li>';
	$link_suffix = (exists $opt->{link_suffix}) ? $opt->{link_suffix} : '</li>';

	$first = $q->{mv_first_match} || 0;
	$Scratch->{paging_first_match} = $first;

	$session = $q->{mv_cache_key};

        if ($replace) {
            $prefix = $suffix = '';
        }
        else {
	    $prefix = q{<div id="pagenumbers"><ul>};
	    $suffix = q{</ul></div>};
        }

	$search_page = $q->{mv_search_page} || $Tag->var('MV_PAGE',1);

	$form_arg = qq{mv_more_ip=1\nmv_nextpage=$search_page};
	$form_arg .= "\npf=$q->{prefix}" if $q->{prefix};
	$form_arg .= "\n$opt->{form}" if $opt->{form};

	$base_url = $Session->{last_url};
	$base_url =~ s%^/%%;
	$base_url =~ s%(/\d+)?(\.html)?$%%;

	for (my $i = 1; $i <= $pages; $i++) {
    		$start = ($i - 1) * $ml;
		if ($start eq $first) {
			# current page
			$curpage = $i;
			$links[$i] = '';
			next;
		}
		$end = $start + $ml - 1;
		if ($end > $matches) {
			$end = matches;
		}
	    	$nav = join(':', $session, $start, $start + ($ml-1), $ml);
		if ($form{category}) {
			$url = $Tag->area({href => "$base_url/$i"});
		}
		else {
			$url = $Tag->area({href => "scan/MM=$nav", form => $form_arg});
		}
	    	$links[$i] = $url;
		$labels[$i] = $i;
	}

	# current page
	$links[$curpage] = '';
	$labels[$curpage] = $curpage;	

	for (my $i = 1; $i <= $pages; $i++) {
    		if ($links[$i]) {
			push(@more, qq{$link_prefix<a href="$links[$i]">$labels[$i]</a>$link_suffix});
		}
		else {
			push(@more, qq{$link_prefix$labels[$i]$link_suffix});
		}
    	}

	unless ($curpage == 1) {	
		$url = $links[$curpage-1];

		if ($anchor_labels{first}) {
		    unshift(@more, qq{$link_prefix<a href="$url">$anchor_labels{first}</a>$link_suffix});
                }
		else {
		    unshift(@more, qq{$link_prefix<a href="$url">first</a>$link_suffix});
                }

		if ($anchor_labels{prev}) {
		    unshift(@more, qq{$link_prefix<a href="$url">$anchor_labels{prev}</a>$link_suffix});
                }
		else {
		    unshift(@more, qq{$link_prefix<a href="$url">previous &lt;</a>$link_suffix});
                }
	}

	unless ($curpage == int($pages)) {
		$url = $links[$curpage+1];

                if ($anchor_labels{next}) {
		    push(@more, qq{$link_prefix<a href="$url">$anchor_labels{next}</a>$link_suffix});
                }
                else {
		    push(@more, qq{$link_prefix<a href="$url">next &gt;</a>$link_suffix});
                }

		if ($anchor_labels{last}) {
		    push(@more, qq{$link_prefix<a href="$url">$anchor_labels{last}</a>$link_suffix});
                }
		else {
		    push(@more, qq{$link_prefix<a href="$url">$more</a>$link_suffix});
                }
	}

	$out = $prefix . join(' ', @more) . $suffix;

	if ($replace) {
		$r =~ s/\[more\]/$out/g;
		return $r;
	}

	return $out;
}
EOS
